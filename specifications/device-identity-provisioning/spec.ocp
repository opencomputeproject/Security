---
title: "Device Identity Provisioning"
version: 0.1
type: BASE
project: Security
authors: [(See Acknowledgements section)]
bibliography: bibliography.yaml
geometry: "left=0.5in,right=0.5in"
...
---

\currenttemplateversion

---

\tableofcontents

\listoffigures

\listoftables

---

<!-- Will bring this in when it's an actual contribution.

# License

## Open Web Foundation (OWF) CLA

Contributions to this Specification are made under the terms and conditions set forth in **Modified Open Web Foundation Agreement 0.9 (OWFa 0.9)**. (As of October 16, 2024)  (“Contribution License”) by:

- TODO: fill in

Usage of this Specification is governed by the terms and conditions set forth in **Modified OWFa 0.9 Final Specification Agreement (FSA)** (As of October 16, 2024) **(“Specification License”)**.

You can review the applicable Specification License(s) referenced above by the contributors to this Specification on the OCP website at <https://www.opencompute.org/contributions/templates-agreements>.

For actual executed copies of either agreement, please contact OCP directly.

NOTWITHSTANDING THE FOREGOING LICENSES, THIS SPECIFICATION IS PROVIDED BY OCP "AS IS" AND OCP EXPRESSLY DISCLAIMS ANY WARRANTIES (EXPRESS, IMPLIED, OR OTHERWISE), INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, OR TITLE, RELATED TO THE SPECIFICATION. NOTICE IS HEREBY GIVEN, THAT OTHER RIGHTS NOT GRANTED AS SET FORTH ABOVE, INCLUDING WITHOUT LIMITATION, RIGHTS OF THIRD PARTIES WHO DID NOT EXECUTE THE ABOVE LICENSES, MAY BE IMPLICATED BY THE IMPLEMENTATION OF OR COMPLIANCE WITH THIS SPECIFICATION. OCP IS NOT RESPONSIBLE FOR IDENTIFYING RIGHTS FOR WHICH A LICENSE MAY BE REQUIRED IN ORDER TO IMPLEMENT THIS SPECIFICATION.  THE ENTIRE RISK AS TO IMPLEMENTING OR OTHERWISE USING THE SPECIFICATION IS ASSUMED BY YOU. IN NO EVENT WILL OCP BE LIABLE TO YOU FOR ANY MONETARY DAMAGES WITH RESPECT TO ANY CLAIMS RELATED TO, OR ARISING OUT OF YOUR USE OF THIS SPECIFICATION, INCLUDING BUT NOT LIMITED TO ANY LIABILITY FOR LOST PROFITS OR ANY CONSEQUENTIAL, INCIDENTAL, INDIRECT, SPECIAL OR PUNITIVE DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS SPECIFICATION, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND EVEN IF OCP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->

<!---
THE UPDATED DEFAULT CONTRIBUTOR LICENSE AGREEMENT (CLA) IS [OWFa 0.9](https://146a55aca6f00848c565-a7635525d40ac1c70300198708936b4e.ssl.cf1.rackcdn.com/images/ed0befaf86bee2568ad720ff4a9a554d1f4260f7.pdf).
PLEASE VERIFY THE CORRECT CLA/FSA IS USED AND EXECUTED FOR THIS CONTRIBUTION.
-->

# Acknowledgements

The Contributors of this Specification would like to acknowledge the following:

- Fabrizio D Amato (AMD)
- Steven Bellock (NVIDIA)
- Jeff Andersen (Google)
- Brett Henning (Broadcom)

<!---
Please describe how this Specification complies with the OCP tenets.
A full explanation of the OCP core tenets can be seen [here](https://146a55aca6f00848c565-a7635525d40ac1c70300198708936b4e.ssl.cf1.rackcdn.com/images/bf648bb75091907147e76846cad590f402660d2e.pdf).
-->

<!-- Will bring this in when it's an actual contribution.

# Compliance with OCP Tenets

## Openness

This specification is open-source.

## Efficiency

This specification allows PKI owners to efficiently issue and provision device identity certificates.

## Impact

This specification unblocks key identity use-cases.

## Scale

This specification is applicable to a wide range of devices that support SPDM.

## Sustainability

This specification does not impact sustainability.

# Base specification

-->

## Terminology

- **PKI**: Public-key infrastructure. Consists of a root key that is trusted by relying parties and infrastructure that manages the issuing of certificates.
- **PKI owner**: An entity that owns a PKI and issues device identity certificates that chain back to that PKI's root key.
- **PKI anchor point**: In the context of this specification, this is the key in a device's internal identity key hierarchy for which a PKI owner issues an identity certificate.
- **Certificate deactivation**: In the context of this specification, this occurs when a device identity certificate subject key's derivation input changes, which causes the identity keypair to change.

## Introduction

In a data center environment, hardware roots of trust leverage device identity keys to attest to their current configuration. Verifiers ensure that the device emitting the attestation is authentic, before going on to evaluate the attested claims against a policy.

In a simple case, such as the one illustrated in @fig:device-cert-hierarchy, a device ships with an identity keypair that is endorsed by the device vendor. Verifiers ensure that the key which signed a given attestation chains back to a known vendor PKI root key.

![Device certificate hierarchy](./diagrams/device_cert_hierarchy.drawio.svg){#fig:device-cert-hierarchy}

Note: see Appendix [-@sec:dice-terminology-clarification] for clarification on DICE terminology in this and later diagrams.

A separate PKI owner may elect to issue their own certificate for the device's identity upon receipt of the device. This identity certificate chains back to the PKI owner's root key, rather than the vendor's. Verifiers can verify attestations against the PKI owner's root key, rather than the vendor's.

@fig:operator-anchor-point illustrates the case of a data center operator acting as a PKI owner and issuing a certificate for the device's identity.

![Operator PKI anchor point](./diagrams/operator_anchor_point.drawio.svg){#fig:operator-anchor-point}

There are several reasons an operator may wish to issue their own identity certificate for devices in their possession:

**Consistent attestation verification**

An operator's fleet may be heterogeneous, with devices from a number of different vendors, each with their own distinct PKI. By issuing an identity certificate for devices based on the operator's PKI, attestation verification within the operator's fleet can be rendered more consistent and simple, as attestation can rely on a single PKI root key.

![Consistent operator PKI](./diagrams/consistent_operator_pki.drawio.svg){#fig:consistent-operator-pki}

**Insulation from potential vendor PKI compromise**

A verifier that relies on a vendor PKI root key is relying on the ongoing security of the vendor's PKI. @fig:compromised-vendor-pki illustrates the risk of a vendor PKI compromise, and how that risk is mitigated by way of the operator's PKI.

![Vendor PKI compromise](./diagrams/compromised_vendor_pki.drawio.svg){#fig:compromised-vendor-pki}

Note that the act of issuing an identity certificate via an operator PKI necessarily involves relying on the trustworthiness of the vendor's PKI. This necessary trust in the vendor's PKI is point-in-time and does not extend past the time at which the certificate was issued. In the event that a vendor PKI becomes compromised, verifiers that trust the operator's PKI can continue to rely on attestations emitted from existing devices that have already been deployed to the operator's fleet. Furthermore, during identity certificate issuance, an operator may be able to rely on other signals in addition to the vendor's PKI to establish the authenticity of devices. See @sec:establishing-trust-in-identity for more details.

**Insulation from potential supply-chain compromise**

Devices often support a hierarchy of identity keys, derived from a number of inputs. @fig:identity-key-derivation illustrates how identity keys are derived in Caliptra [@{caliptra}]. Other devices may have different identity layering schemes.

![Identity key derivation](./diagrams/identity_key_derivation.drawio.svg){#fig:identity-key-derivation}

In Caliptra, the LDevID keypair is derived not only from UDS, but also field entropy, which is typically held in fuses and may be programmed into the device upon initial ingestion. By choosing the LDevID keypair as the PKI anchor point for the operator's device identity certificate, the operator insulates themselves from supply-chain attackers that may have invasively exfiltrated the device's UDS. See the Caliptra [specification](https://github.com/chipsalliance/Caliptra/blob/main/doc/caliptra_1x/Caliptra.md#ldevid-key) for additional commentary on the utility of LDevID and field entropy.

**Implicit attestation**

The PKI owner may select various keys in the identity hierarchy for which to issue a certificate. Each key will have different measurements contribute to that key's derivation. By issuing a device identity certificate for a given key, the PKI owner is implicitly blessing the measurements which contribute to that key's derivation. Any attestations endorsed via that identity certificate carry implicit assurance that the measurements which contribute to that identity key are the same as when the identity certificate was issued.

Consider the case of a data center operator that deploys a device, and a tenant that leases the device. This arrangement is illustrated in @fig:tenant-anchor-point.

![Tenant PKI anchor point](./diagrams/tenant_anchor_point.drawio.svg){#fig:tenant-anchor-point}

In this example, a device wielding an identity key endorsed by the tenant-issued identity certificate implicitly attests that its owner configuration and FMC hash are the same as was present on the device when the tenant issued the identity certificate. The certificate will be implicitly deactivated if the owner configuration or FMC hash change.

Note: "certificate deactivation" is not the same as certificate revocation or expiration. A certificate that was deactivated by virtue of an identity key derivation input changing will become re-activated if that input reverts to its prior value. PKI owners wishing to permanently revoke an identity certificate must therefore use a separate mechansim, such as a CRL.

Each PKI owner may have their own desired implicit attestation properties, and can select their PKI anchor point accordingly.

### Support for multiple PKI owners

A device may have multiple simultaneous PKI owners, and serve attestations to multiple verifiers, each with their own configured PKI root key.

While each identity certificate issued by a given PKI owner could be distributed to the relevant attestation verifiers through a number of means, the most tractable method in many cases is for the device to cache each of its PKI owner's identity certificates locally, and serve a selected identity certificate along with each attestation statement. Each attestation requester must be able to request a PKI anchor point on a per-attestation-request basis.

![Anchor point selection](./diagrams/anchor_point_selection.drawio.svg){#fig:anchor-point-selection}

Note: there may be intermediate certificates between a given PKI owner's root key and the identity certificate issued for a device. This specification does not impose an upper-limit on the number of intermediate certificates that may exist for a given PKI owner. Devices typically have limited internal storage capacity. As a result, this specification does not require that the device's attestation responses include any intermediate certificates beyond the identity certificate issued by a PKI owner. These intermediate certificates should be communicated to the verifier out-of-band. Such communication is outside the scope of this specification.

### Specification scope

This specification describes the following aspects of device identity endorsement and provisioning:

- Discovering the set of identity keypairs supported by a device, along with each keypair's respective derivation inputs.
- Establishing trust in a selected identity keypair from the device.
- Issuing and provisioning an identity certificate to the device.
- Requesting a given identity certificate when obtaining an attestation statement from the device.

The following items are out of scope:

- Certificate revocation
- General attestation verification

## Discovering device identity keypairs {#sec:discovering-device-keypairs}

TODO: fill in

## Establishing trust in a selected identity keypair {#sec:establishing-trust-in-identity}

To allow a remote party to establish trust in a selected keypair, the device can emit a Certification Signing Request (CSR) [@{pkcs-10}]. This is supported in SPDM 1.3 [@{spdm-1.3}] via the GET_CSR command. However, there is a drawback to GET_CSR as it is currently defined: the CSR is signed only by the subject key, and does not include a way to attest that the CSR was emitted from a given device.

To allow a device to attest that a given key is trustworthy, the device should issue its own signature over the public key, which can include a freshness nonce and additional metadata, such as the key's derivation attribute OIDs.

![Envelope-signed CSR](./diagrams/envelope_signed_csr.drawio.svg){#fig:envelope-signed-csr}

The CSR is included as a claim in an Entity Attestation Token (EAT) [@{ietf-eat}].

Metadata such as the key's derivation attribute OIDs can also be embedded in a CoRIM. The mechanism for this is out of scope of this specification.

Some devices may not support the generation of self-signed CSRs for certain keys in their identity key hierarchy, such as LDevID. To support such devices, this specification defines a "non-self-signed CSR", which includes the subject public key but an all-zeroes signature field. The non-self-signed CSR is still itself signed, by way of the EAT.

![Envelope-signed Non-self-signed CSR](./diagrams/envelope_signed_csr_non_self_signed.drawio.svg){#fig:envelope-signed-csr-non-self-signed}

**Transport**: These commands follow the transport bindings defined in [@{ocp-command-registry}].

### GET_ENVELOPE_SIGNED_CSR command

This command returns an envelope-signed Certificate Signing Request (CSR) that conveys the key derivation properties of the requested identity key, enabling PKI owners to make informed decisions when issuing certificates based on how the key was derived.

Table: GET_ENVELOPE_SIGNED_CSR VendorDefinedReqPayload {#tbl:ecsr-req}

+---------------------+---------------------+---------------------+----------------------------------------------+
| Byte offset         | Field               | Size (bytes)        | Description                                  |
+=====================+=====================+=====================+==============================================+
| 0                   | CommandVersion      | 1                   | The version of this request structure.       |
|                     |                     |                     | Shall be zero.                               |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 1                   | CommandCode         | 1                   | Shall be 01h to indicate                     |
|                     |                     |                     | GET_ENVELOPE_SIGNED_CSR.                     |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 2                   | Reserved            | 4                   | Reserved.                                    |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 6                   | Param1              | 1                   | KeyPairID. The value of this field           |
|                     |                     |                     | shall be the keypair ID identifying          |
|                     |                     |                     | the desired asymmetric key pair for          |
|                     |                     |                     | which the CSR should be issued.              |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 7                   | Param2              | 1                   | Request Attributes. Shall adhere to          |
|                     |                     |                     | Table 91 of SPDM 1.3.                        |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 8                   | RequesterInfoLength | 2                   | Shall be the length of the RequesterInfo     |
|                     |                     |                     | field in bytes provided by the Requester.    |
|                     |                     |                     | This field can be 0.                         |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 10                  | OpaqueDataLength    | 2                   | Shall be the length of the OpaqueData        |
|                     |                     |                     | field in bytes provided by the Requester.    |
|                     |                     |                     | The value should not be greater than 1024    |
|                     |                     |                     | bytes. Shall be 0 if no OpaqueData is        |
|                     |                     |                     | provided.                                    |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 12                  | SignerSlotIDParam   | 1                   | - Bit [7:5]. Reserved.                       |
|                     |                     |                     | - Bit [4:4]. If this value is `1`, the CSR   |
|                     |                     |                     | envelope is signed; otherwise the envelope   |
|                     |                     |                     | is unsigned, and bits [3:0] are ignored.     |
|                     |                     |                     | - Bit [3:0]. Shall be the SlotID. Slot       |
|                     |                     |                     | number of the Responder certificate chain    |
|                     |                     |                     | that shall be used for authenticating the    |
|                     |                     |                     | CSR envelope. If the Responder’s public key  |
|                     |                     |                     | was provisioned to the Requester previously, |
|                     |                     |                     | this field shall be 0xF.                     |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 13                  | Nonce               | 32                  | The Requester should choose a random         |
|                     |                     |                     | value.                                       |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 45                  | RequesterInfo       | RequesterInfoLength | Shall be the optional information provided   |
|                     |                     |                     | by the Requester. This field shall be        |
|                     |                     |                     | DER-encoded.                                 |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 45 +                | OpaqueData          | OpaqueDataLength    | The Requester can include vendor-specific    |
| RequesterInfoLength |                     |                     | information for the Responder to generate    |
|                     |                     |                     | the CSR. This field is optional. If present, |
|                     |                     |                     | this field shall conform to the selected     |
|                     |                     |                     | opaque data format in OtherParamsSelection   |
|                     |                     |                     | from Table 21 of SPDM 1.3.                   |
+---------------------+---------------------+---------------------+----------------------------------------------+

The following fields should be treated identically as in GET_CSR from SPDM 1.3:

- Param1
- Param2
- RequesterInfoLength
- OpaqueDataLength
- RequesterInfo
- OpaqueData

The following fields present in this command are not present in GET_CSR:

- **SignerSlotIDParam** - defines which key signs the CSR envelope.
- **Nonce** - provides freshness.

Table: ENVELOPE_SIGNED_CSR VendorDefinedRespPayload {#tbl:ecsr-resp}

+--------+-------------------------+-------------------------+------------------------------------------+
| Byte   | Field                   | Size (bytes)            | Description                              |
| offset |                         |                         |                                          |
+========+=========================+=========================+==========================================+
| 0      | CommandVersion          | 1                       | The version of this response structure.  |
|        |                         |                         | Shall be zero.                           |
+--------+-------------------------+-------------------------+------------------------------------------+
| 1      | CommandCode             | 1                       | Shall be 01h to indicate                 |
|        |                         |                         | ENVELOPE_SIGNED_CSR.                     |
+--------+-------------------------+-------------------------+------------------------------------------+
| 2      | Reserved                | 4                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+
| 6      | Reserved                | 1                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+
| 7      | EnvelopeSignedCSRLength | 2                       | Shall be the length of the               |
|        |                         |                         | EnvelopeSignedCSRdata in bytes.          |
|        |                         |                         | Zero if status is not success.           |
+--------+-------------------------+-------------------------+------------------------------------------+
| 9      | EnvelopeSignedCSRdata   | EnvelopeSignedCSRLength | Shall be the requested contents of the   |
|        |                         |                         | envelope-signed CSR. This field shall be |
|        |                         |                         | CBOR-encoded. Present only if status     |
|        |                         |                         | is success.                              |
+--------+-------------------------+-------------------------+------------------------------------------+


The EnvelopeSignedCSRdata shall adhere to the following requirements:

- The payload SHALL be an EAT encoded as a CBOR Web Token (CWT) [@{ietf-cwt}].
- The EAT SHALL conform to the OCP Envelope-Signed CSR EAT profile (see @sec:defined-oids for the defined OID).
- The EAT SHALL include standard claims for issuer identification and nonce for freshness verification.
- The EAT SHALL include private claims[^private-claims] containing:
  - The CSR as a byte string
  - An array of OIDs representing the key's derivation attributes (see @sec:defined-oids for defined OIDs)
- The CSR included in the EAT SHALL be DER-encoded and may be either self-signed or non-self-signed depending on device capabilities. For non-self-signed CSRs, the signature field SHALL contain all zeroes and be the same size as would be required for a valid signature using the subject key's algorithm.
- The nonce claim SHALL match the nonce value provided in the GET_ENVELOPE_SIGNED_CSR request to ensure freshness.
- If SignerSlotIDParam indicates a signed envelope, the CWT SHALL be signed by an Attestation Key endorsed by the certificate chain corresponding to the specified SlotID. In addition, the unprotected header of the CWT SHALL contain the Attestation Key's certificate chain, including at least all certificates from the Attestation Key up to the identity certificate issued by the slot's PKI owner.
  - E.g., Slot 0's certificate chain would extend at least to the vendor-endorsed certificate over IDevID. A separate slot's certificate chain would extend at least to the certificate issued by the slot's configured PKI owner.
  - A device may report intermediate certificates for the slot's PKI owner if it is configured to do so.

[^private-claims]: RFC 8392 [@{ietf-cwt}] defines a private claim as one whose key value has an integer value < -65536.

### Defined OIDs {#sec:defined-oids}

**OCP Security Branch**: `ocp-security OBJECT IDENTIFIER ::= {1 3 6 1 4 1 42623 1}`

**Envelope-signed EAT profile OID**: `ocp-security-dip-eat-profile OBJECT IDENTIFIER ::= {ocp-security 1}`

**Key Derivation Attribute OID Branch**: `ocp-security-dip-kda OBJECT IDENTIFIER ::= {ocp-security 2}`

The following OIDs are defined for key derivation attributes:

- **Derived from Owner Entropy Fuse**: `ocp-security-dip-kda-OwnerEntropyFuse ::= {ocp-security-dip-kda 1}`
- **Derived from First Mutable Code**: `ocp-security-dip-kda-FirstMutableCode ::= {ocp-security-dip-kda 2}`
- **Derived from Non-First Mutable Code**: `ocp-security-dip-kda-NonFirstMutableCode ::= {ocp-security-dip-kda 3}`
- **Derived from Owner Provisioned Key**: `ocp-security-dip-kda-OwnerProvisionedKey ::= {ocp-security-dip-kda 4}`

These OIDs indicate which inputs contribute to the derivation of the identity key for which the CSR is being requested.

Subsequent versions of this specification may be expanded with additional key derivation attribute OIDs.

## Issuing and provisioning an identity certificate {#sec:issuing-and-provisioning-identity-cert}

After establishing trust in a device's identity keypair through the envelope-signed CSR mechanism, a PKI owner can issue and provision an identity certificate to the device. This specification defines OCP-specific commands for certificate provisioning.

### Certificate provisioning overview

When a PKI owner issues an identity certificate for a device key (such as IDevID or LDevID), they provision a certificate chain to the device that includes the PKI-issued identity certificate for the device key.

**Important**: While devices may expose CSRs for various keys in their hierarchy, endorsement chains provisioned via `OCP_SET_ENDORSEMENT` SHALL NOT include LEAF certificates. This ensures that endorsements work across different use cases (e.g., attestation, secure sessions) since each use case may have different LEAF certificates while sharing the same endorsement chain.

**Certificate chain composition**: When provisioning via `OCP_SET_ENDORSEMENT`, the certificate chain SHALL include:
- The PKI-issued identity certificate for the device key (e.g., the LDevID certificate issued by the owner's PKI)
- Optionally, any intermediate CA certificates
- Optionally, the root CA certificate

### Understanding slots

In this specification, a "slot" refers to a storage location within the device that holds a certificate chain. This concept directly maps to SPDM's certificate slot mechanism:

- **SPDM context**: SPDM defines 8 possible slots (0-7) where certificate chains can be stored. When an SPDM requester invokes `GET_CERTIFICATE`, they specify which slot's certificate chain they want to retrieve.

- **Attestation context**: During attestation, the device uses these certificate chains to establish trust. For example, when generating an EAT, the device may include a LEAF certificate that chains to one of the certificates stored in these slots. The verifier can then retrieve the appropriate certificate chain to validate the complete trust path.

- **OCP abstraction**: While SPDM uses numeric slot IDs (0-7), the OCP commands abstract this using Key Provisioning Entity identifiers (VENDOR, OWNER, TENANT). The device internally maps these entities to specific slot numbers, which can be discovered via `OCP_GET_SLOT_ID_MAPPING`.

This abstraction allows:
- Consistent semantics across different device implementations
- Devices to optimize their internal slot allocation
- Compatibility with both SPDM and non-SPDM attestation flows

### Slot allocation and management

Devices implementing this specification SHALL support certificate slot allocation with the following requirements:

- **Minimum requirement**: Devices MUST present at least three slots for attestation (vendor, owner, tenant), and MUST support in-field provisioning of certificates for the latter two (owner, tenant).
- **Vendor flexibility**: The specific slot numbers are determined by the device vendor and discovered via `OCP_GET_SLOT_ID_MAPPING`
- **Total slots**: SPDM supports up to 8 slots (0-7), with the allocation between vendor and OCP use defined by the vendor

Example allocation (vendor-specific):
- Slot 0: Vendor endorsement (pre-provisioned)
- Slot 2: Platform owner endorsement
- Slot 4: Tenant endorsement
- Other slots: Available for additional use cases or vendor-specific purposes

**Important**: The actual slot mapping is vendor-defined and discovered at runtime. The device SHALL return an error if attempts are made to provision more slots than physically supported

#### Key Provisioning Entity Registry

The following Key Provisioning Entity values are defined and SHALL be used consistently across all OCP certificate management commands:

Table: Key Provisioning Entity Values {#tbl:key-provisioning-entity}

+--------+----------+--------------------------------------------------+
| Value  | Name     | Description                                      |
+========+==========+==================================================+
| 0x00   | VENDOR   | Vendor-provisioned endorsements                  |
|        |          | (typically pre-installed)                        |
+--------+----------+--------------------------------------------------+
| 0x01   | OWNER    | Platform owner-provisioned endorsements          |
+--------+----------+--------------------------------------------------+
| 0x02   | TENANT   | Tenant-provisioned endorsements                  |
|        |          | in bare metal scenarios                          |
+--------+----------+--------------------------------------------------+
| 0x03-  | Reserved | Reserved for future use                          |
| 0xFF   |          |                                                  |
+--------+----------+--------------------------------------------------+

Future versions of this specification may define additional entity values.

#### OCP_GET_SLOT_ID_MAPPING command

This is an informational command that returns the mapping between Key Provisioning Entities (VENDOR, OWNER, TENANT) and SPDM slot numbers. It enables interoperability between OCP entity-based commands and SPDM slot-based commands on devices that support both SPDM and non-SPDM attesters.

Table: GET_SLOT_ID_MAPPING VendorDefinedReqPayload {#tbl:slot-mapping-req}

+---------------------+---------------------+---------------------+----------------------------------------------+
| Byte offset         | Field               | Size (bytes)        | Description                                  |
+=====================+=====================+=====================+==============================================+
| 0                   | CommandVersion      | 1                   | The version of this request structure.       |
|                     |                     |                     | Shall be zero.                               |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 1                   | CommandCode         | 1                   | Shall be 03h to indicate                     |
|                     |                     |                     | GET_SLOT_ID_MAPPING.                         |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 2                   | Reserved            | 4                   | Reserved.                                    |
+---------------------+---------------------+---------------------+----------------------------------------------+

Table: SLOT_ID_MAPPING VendorDefinedRespPayload {#tbl:slot-mapping-resp}

+--------+-------------------------+-------------------------+------------------------------------------+
| Byte   | Field                   | Size (bytes)            | Description                              |
| offset |                         |                         |                                          |
+========+=========================+=========================+==========================================+
| 0      | CommandVersion          | 1                       | The version of this response structure.  |
|        |                         |                         | Shall be zero.                           |
+--------+-------------------------+-------------------------+------------------------------------------+
| 1      | CommandCode             | 1                       | Shall be 03h to indicate                 |
|        |                         |                         | SLOT_ID_MAPPING.                         |
+--------+-------------------------+-------------------------+------------------------------------------+
| 2      | Reserved                | 4                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+
| 6      | MappingCount            | 1                       | Number of mappings returned.             |
|        |                         |                         | Shall not exceed 8.                      |
+--------+-------------------------+-------------------------+------------------------------------------+
| 7      | Reserved                | 1                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+
| 8      | MappingTable            | MappingCount * 2        | Array of mappings. Each entry            |
|        |                         |                         | consists of:                             |
|        |                         |                         | - KeyProvisioningEntity (1 byte)         |
|        |                         |                         | - SlotID (1 byte)                        |
+--------+-------------------------+-------------------------+------------------------------------------+

#### OCP_SET_ENDORSEMENT command

Table: SET_ENDORSEMENT VendorDefinedReqPayload {#tbl:set-endorsement-req}

+---------------------+----------------------+---------------------+----------------------------------------------+
| Byte offset         | Field                | Size (bytes)        | Description                                  |
+=====================+======================+=====================+==============================================+
| 0                   | CommandVersion       | 1                   | The version of this request structure.       |
|                     |                      |                     | Shall be zero.                               |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 1                   | CommandCode          | 1                   | Shall be 04h to indicate                     |
|                     |                      |                     | SET_ENDORSEMENT.                             |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 2                   | Reserved             | 4                   | Reserved.                                    |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 6                   | KeyProvisioningEntity| 1                   | Entity from which to get endorsement.        |
|                     |                      |                     | See @tbl:key-provisioning-entity.            |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 7                   | Flags                | 1                   | - Bit [7:1]: Reserved.                       |
|                     |                      |                     | - Bit [0]: FORCE flag.                       |
|                     |                      |                     |   If set to 1, allows overwriting an         |
|                     |                      |                     |   existing endorsement.                      |
|                     |                      |                     |   If set to 0, returns error if              |
|                     |                      |                     |   already provisioned.                       |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 8                   | KeyPairID            | 1                   | Key identifier for certificate selection.    |
|                     |                      |                     | Usage is vendor-specific.                    |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 9                   | Reserved             | 1                   | Reserved.                                    |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 10                  | CertChainLength      | 2                   | Length of the certificate chain in bytes.    |
|                     |                      |                     | Shall not exceed device capabilities.        |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 12                  | CertChain            | CertChainLength     | DER-encoded certificate chain.               |
|                     |                      |                     | SHALL NOT include LEAF certificates.         |
|                     |                      |                     | Device SHALL return POLICY_VIOLATION if      |
|                     |                      |                     | LEAF certificate is detected in chain.       |
+---------------------+----------------------+---------------------+----------------------------------------------+

Table: SET_ENDORSEMENT VendorDefinedRespPayload {#tbl:set-endorsement-resp}

+--------+-------------------------+-------------------------+------------------------------------------+
| Byte   | Field                   | Size (bytes)            | Description                              |
| offset |                         |                         |                                          |
+========+=========================+=========================+==========================================+
| 0      | CommandVersion          | 1                       | The version of this response structure.  |
|        |                         |                         | Shall be zero.                           |
+--------+-------------------------+-------------------------+------------------------------------------+
| 1      | CommandCode             | 1                       | Shall be 04h to indicate                 |
|        |                         |                         | SET_ENDORSEMENT.                         |
+--------+-------------------------+-------------------------+------------------------------------------+
| 2      | Reserved                | 2                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+


#### OCP_GET_ENDORSEMENT command

Table: GET_ENDORSEMENT VendorDefinedReqPayload {#tbl:get-endorsement-req}

+---------------------+----------------------+---------------------+----------------------------------------------+
| Byte offset         | Field                | Size (bytes)        | Description                                  |
+=====================+======================+=====================+==============================================+
| 0                   | CommandVersion       | 1                   | The version of this request structure.       |
|                     |                      |                     | Shall be zero.                               |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 1                   | CommandCode          | 1                   | Shall be 05h to indicate                     |
|                     |                      |                     | GET_ENDORSEMENT.                             |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 2                   | Reserved             | 4                   | Reserved.                                    |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 6                   | KeyProvisioningEntity| 1                   | Entity from which to get endorsement.        |
|                     |                      |                     | See @tbl:key-provisioning-entity.            |
+---------------------+----------------------+---------------------+----------------------------------------------+
| 7                   | Reserved             | 1                   | Reserved.                                    |
+---------------------+----------------------+---------------------+----------------------------------------------+

Table: GET_ENDORSEMENT VendorDefinedRespPayload {#tbl:get-endorsement-resp}

+--------+-------------------------+-------------------------+------------------------------------------+
| Byte   | Field                   | Size (bytes)            | Description                              |
| offset |                         |                         |                                          |
+========+=========================+=========================+==========================================+
| 0      | CommandVersion          | 1                       | The version of this response structure.  |
|        |                         |                         | Shall be zero.                           |
+--------+-------------------------+-------------------------+------------------------------------------+
| 1      | CommandCode             | 1                       | Shall be 05h to indicate                 |
|        |                         |                         | GET_ENDORSEMENT.                         |
+--------+-------------------------+-------------------------+------------------------------------------+
| 2      | Reserved                | 4                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+
| 6      | Reserved                | 1                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+
| 7      | CertChainLength         | 2                       | Length of the certificate chain.         |
|        |                         |                         | Zero if status is not success.           |
+--------+-------------------------+-------------------------+------------------------------------------+
| 9      | CertChain               | CertChainLength         | DER-encoded certificate chain.           |
|        |                         |                         | Does NOT include LEAF certificate.       |
|        |                         |                         | Present only if status is success.       |
+--------+-------------------------+-------------------------+------------------------------------------+

### Provisioning workflow

A typical provisioning workflow follows these steps:

1. **CSR Generation**: The PKI owner requests an envelope-signed CSR for their chosen identity key using `GET_ENVELOPE_SIGNED_CSR`
2. **Certificate Issuance**: The PKI owner validates the CSR and issues an identity certificate
3. **Chain Provisioning**: The PKI owner provisions their endorsement chain using `OCP_SET_ENDORSEMENT` with the appropriate KeyProvisioningEntity value
4. **Verification**: The PKI owner can verify successful provisioning by retrieving the chain using `OCP_GET_ENDORSEMENT`

For SPDM-aware implementations:

5. **Optional Mapping Discovery**: Query `OCP_GET_SLOT_ID_MAPPING` to understand which SPDM slots are affected by OCP operations

### Compatibility considerations

For devices that support both SPDM and OCP attestation paths:

- `OCP_SET_ENDORSEMENT` internally manages slot allocation based on the KeyProvisioningEntity
- `OCP_GET_ENDORSEMENT` retrieves endorsements by entity rather than slot number
- `GET_CERTIFICATE` (SPDM) can still be used with the slot numbers reported by `OCP_GET_SLOT_ID_MAPPING`
- The device ensures consistency between OCP entity-based and SPDM slot-based access

This approach simplifies the interface by abstracting slot management while maintaining full compatibility with SPDM.

### Certificate chain validation

When provisioning certificate chains, devices SHALL validate:

- The certificate chain is properly formed and each certificate correctly signs the next
- The chain terminates at a self-signed root or a certificate that can be verified against pre-existing trust anchors
- All certificates in the chain are within their validity periods
- The certificate chain length does not exceed device storage capabilities

Devices MAY additionally validate:

- Certificate revocation status if CRL or OCSP information is available
- Certificate policy OIDs match expected values for the entity being provisioned

### Error handling

This specification uses error codes defined in the [@{ocp-command-registry}]. The following error conditions are specifically relevant to certificate provisioning operations:

#### GET_ENVELOPE_SIGNED_CSR errors

- **INVALID_PARAMETER (0x02)**: Invalid KeyPairID format, malformed SignerSlotIDParam, or invalid Request Attributes
- **INVALID_LENGTH (0x03)**: RequesterInfoLength or OpaqueDataLength exceeds limits
- **INVALID_IDENTIFIER (0x04)**: Requested KeyPairID not found, or SignerSlotIDParam references a non-existent or unprovisioned slot
- **DEVICE_NOT_READY (0x08)**: Device cannot generate CSR in current state

#### Certificate provisioning errors (SET_ENDORSEMENT)

- **INVALID_PARAMETER (0x02)**: Invalid KeyProvisioningEntity value
- **INVALID_LENGTH (0x03)**: Certificate chain exceeds device storage capacity  
- **INSUFFICIENT_RESOURCES (0x06)**: Device lacks resources to complete the operation
- **POLICY_VIOLATION (0x0E)**: 
  - Attempting to provision an entity that already has an endorsement when FORCE flag is not set
  - Certificate chain includes a LEAF certificate
- **INVALID_STATE (0x0F)**: Certificate chain validation failed

#### Certificate retrieval errors (GET_ENDORSEMENT)

- **INVALID_PARAMETER (0x02)**: Invalid KeyProvisioningEntity value
- **RESOURCE_UNAVAILABLE (0x0D)**: Attempting to retrieve endorsement for an entity that has not been provisioned

Implementations SHALL use these standardized error codes to ensure consistent error reporting across different devices.


### Security considerations

#### Protection of provisioning operations

Certificate provisioning operations SHOULD be performed over authenticated and encrypted channels:

- For SPDM paths: Use SPDM secured messages when available
- For out-of-band provisioning: Use platform-specific secure channels

#### Entity update policy

To prevent unauthorized certificate replacement:

- Devices MAY implement policies restricting certificate updates based on:
  - Physical presence assertions
  - Platform ownership state
  - Secure boot state
- Once provisioned, entities SHALL NOT be overwritable without the FORCE flag being explicitly set
- When FORCE flag is used to overwrite an existing endorsement, devices SHOULD log this as a security-relevant event

#### Certificate lifecycle management

PKI owners are responsible for:

- Tracking certificate expiration dates
- Implementing certificate renewal procedures before expiration
- Maintaining certificate revocation lists (CRLs) for compromised certificates
- Ensuring time synchronization for certificate validity checking

### Implementation notes

#### Internal slot management

Devices implementing these OCP commands:

- SHALL internally manage the mapping between KeyProvisioningEntity values and storage slots
- MAY use any slot allocation strategy as long as it supports the minimum required entities
- SHOULD use consistent slot assignments across device resets for predictability

#### Storage optimization

Given the limited storage available on many devices:

- Redundant certificates (e.g., those appearing in multiple chains) MAY be stored once and referenced multiple times

#### Minimal implementation

Devices that only support OCP commands (not SPDM):

- MAY omit implementation of `OCP_GET_SLOT_ID_MAPPING`
- SHALL still support all KeyProvisioningEntity values defined in this specification
- Focus on entity-based access without exposing slot details

### Example provisioning sequence

Here's a complete example of a platform owner provisioning their endorsement chain:

1. **BMC → Device**: `GET_ENVELOPE_SIGNED_CSR(KeyPairID=LDevID, SlotID=0, Nonce)`
   
   **Device → BMC**: `EAT{CSR for LDevID, LDEVID Key Derivation Attributes(OIDs), Nonce}`

2. **BMC validates CSR and issues certificate for LDevID**

3. **BMC → Device**: `OCP_SET_ENDORSEMENT(KeyProvisioningEntity=OWNER, Flags=0, KeyPairID=LDevID, OwnerEndorsementChain)`
   
   **Device → BMC**: `Status=SUCCESS`

4. **BMC → Device**: `OCP_GET_ENDORSEMENT(KeyProvisioningEntity=OWNER)`
   
   **Device → BMC**: `Status=SUCCESS, OwnerEndorsementChain` (confirming successful provisioning)

5. **Optional - BMC → Device**: `OCP_GET_SLOT_ID_MAPPING()`
   
   **Device → BMC**: `[{VENDOR: 0}, {OWNER: 2}, {TENANT: 4}]`
   
   (BMC now knows that the OWNER endorsement was stored in SPDM slot 2)

After this sequence, attestations from the device can reference the owner's endorsement chain


TODO: fill in additional details.

## Requesting an identity certificate during attestation {#sec:requesting-identity-cert-during-attestation}

This will be accomplished by selecting the correct `SlotIDParam` when invoking SPDM commands.

TODO: fill in additional details.

## Confidential compute considerations

TODO: fill in

# Appendix

## Clarification of DICE Terminology {#sec:dice-terminology-clarification}

In this specification, several example device identity key hierarchies use the term "FMC". In this context, FMC stands for "First Mutable Code".

In TCG's DICE Hardware Requirements [@{tcg-dice-hardware-requirements}], FMC is defined as "First Measured Code", and is "the code and/or configuration information that is executed and/or takes effect immediately following the Device Identifier Composition Engine". First Measured Code is synonymous with Layer 0 in the DICE Layering Architecture [@{tcg-dice-layering-architecture}].

The difference between First Measured Code and First Mutable Code is subtle but important. In Caliptra, the First Measured Code corresponds with the Caliptra ROM layer. As such, Caliptra's Device ID or IDevID keypair is wielded by ROM, rather than Caliptra's FMC.

## Envelope-signed CSR EAT CDDL

```include {.small}
!include cddl/envelope-signed-csr-eat.cddl
```

## Envelope-signed CSR EAT example CDDL diag

```include {.small}
!include diag/envelope-signed-csr-eat-example.diag
```
