---
title: "Device Identity Provisioning"
version: 0.1
type: BASE
project: Security
authors: [(See Acknowledgements section)]
bibliography: bibliography.yaml
...
---

\currenttemplateversion

---

\tableofcontents

\listoffigures

\listoftables

---

<!-- Will bring this in when it's an actual contribution.

# License

## Open Web Foundation (OWF) CLA

Contributions to this Specification are made under the terms and conditions set forth in **Modified Open Web Foundation Agreement 0.9 (OWFa 0.9)**. (As of October 16, 2024)  (“Contribution License”) by:

- TODO: fill in

Usage of this Specification is governed by the terms and conditions set forth in **Modified OWFa 0.9 Final Specification Agreement (FSA)** (As of October 16, 2024) **(“Specification License”)**.

You can review the applicable Specification License(s) referenced above by the contributors to this Specification on the OCP website at <https://www.opencompute.org/contributions/templates-agreements>.

For actual executed copies of either agreement, please contact OCP directly.

NOTWITHSTANDING THE FOREGOING LICENSES, THIS SPECIFICATION IS PROVIDED BY OCP "AS IS" AND OCP EXPRESSLY DISCLAIMS ANY WARRANTIES (EXPRESS, IMPLIED, OR OTHERWISE), INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, OR TITLE, RELATED TO THE SPECIFICATION. NOTICE IS HEREBY GIVEN, THAT OTHER RIGHTS NOT GRANTED AS SET FORTH ABOVE, INCLUDING WITHOUT LIMITATION, RIGHTS OF THIRD PARTIES WHO DID NOT EXECUTE THE ABOVE LICENSES, MAY BE IMPLICATED BY THE IMPLEMENTATION OF OR COMPLIANCE WITH THIS SPECIFICATION. OCP IS NOT RESPONSIBLE FOR IDENTIFYING RIGHTS FOR WHICH A LICENSE MAY BE REQUIRED IN ORDER TO IMPLEMENT THIS SPECIFICATION.  THE ENTIRE RISK AS TO IMPLEMENTING OR OTHERWISE USING THE SPECIFICATION IS ASSUMED BY YOU. IN NO EVENT WILL OCP BE LIABLE TO YOU FOR ANY MONETARY DAMAGES WITH RESPECT TO ANY CLAIMS RELATED TO, OR ARISING OUT OF YOUR USE OF THIS SPECIFICATION, INCLUDING BUT NOT LIMITED TO ANY LIABILITY FOR LOST PROFITS OR ANY CONSEQUENTIAL, INCIDENTAL, INDIRECT, SPECIAL OR PUNITIVE DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS SPECIFICATION, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND EVEN IF OCP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->

<!---
THE UPDATED DEFAULT CONTRIBUTOR LICENSE AGREEMENT (CLA) IS [OWFa 0.9](https://146a55aca6f00848c565-a7635525d40ac1c70300198708936b4e.ssl.cf1.rackcdn.com/images/ed0befaf86bee2568ad720ff4a9a554d1f4260f7.pdf).
PLEASE VERIFY THE CORRECT CLA/FSA IS USED AND EXECUTED FOR THIS CONTRIBUTION.
-->

# Acknowledgements

The Contributors of this Specification would like to acknowledge the following:

- Fabrizio D Amato (AMD)
- Steven Bellock (NVIDIA)
- Jeff Andersen (Google)
- Brett Henning (Broadcom)

<!---
Please describe how this Specification complies with the OCP tenets.
A full explanation of the OCP core tenets can be seen [here](https://146a55aca6f00848c565-a7635525d40ac1c70300198708936b4e.ssl.cf1.rackcdn.com/images/bf648bb75091907147e76846cad590f402660d2e.pdf).
-->

<!-- Will bring this in when it's an actual contribution.

# Compliance with OCP Tenets

## Openness

This specification is open-source.

## Efficiency

This specification allows PKI owners to efficiently issue and provision device identity certificates.

## Impact

This specification unblocks key identity use-cases.

## Scale

This specification is applicable to a wide range of devices that support SPDM.

## Sustainability

This specification does not impact sustainability.

# Base specification

-->

## Terminology

- **PKI**: Public-key infrastructure. Consists of a root key that is trusted by relying parties and infrastructure that manages the issuing of certificates.
- **PKI owner**: An entity that owns a PKI and issues device identity certificates that chain back to that PKI's root key.
- **PKI anchor point**: In the context of this specification, this is the key in a device's internal identity key hierarchy for which a PKI owner issues an identity certificate.
- **Certificate deactivation**: In the context of this specification, this occurs when a device identity certificate subject key's derivation input changes, which causes the identity keypair to change.

## Introduction

In a data center environment, hardware roots of trust leverage device identity keys to attest to their current configuration. Verifiers ensure that the device emitting the attestation is authentic, before going on to evaluate the attested claims against a policy.

In a simple case, such as the one illustrated in @fig:device-cert-hierarchy, a device ships with an identity keypair that is endorsed by the device vendor. Verifiers ensure that the key which signed a given attestation chains back to a known vendor PKI root key.

![Device certificate hierarchy](./diagrams/device_cert_hierarchy.drawio.svg){#fig:device-cert-hierarchy}

Note: see Appendix [-@sec:dice-terminology-clarification] for clarification on DICE terminology in this and later diagrams.

A separate PKI owner may elect to issue their own certificate for the device's identity upon receipt of the device. This identity certificate chains back to the PKI owner's root key, rather than the vendor's. Verifiers can verify attestations against the PKI owner's root key, rather than the vendor's.

@fig:operator-anchor-point illustrates the case of a data center operator acting as a PKI owner and issuing a certificate for the device's identity.

![Operator PKI anchor point](./diagrams/operator_anchor_point.drawio.svg){#fig:operator-anchor-point}

There are several reasons an operator may wish to issue their own identity certificate for devices in their possession:

**Consistent attestation verification**

An operator's fleet may be heterogeneous, with devices from a number of different vendors, each with their own distinct PKI. By issuing an identity certificate for devices based on the operator's PKI, attestation verification within the operator's fleet can be rendered more consistent and simple, as attestation can rely on a single PKI root key.

![Consistent operator PKI](./diagrams/consistent_operator_pki.drawio.svg){#fig:consistent-operator-pki}

**Insulation from potential vendor PKI compromise**

A verifier that relies on a vendor PKI root key is relying on the ongoing security of the vendor's PKI. @fig:compromised-vendor-pki illustrates the risk of a vendor PKI compromise, and how that risk is mitigated by way of the operator's PKI.

![Vendor PKI compromise](./diagrams/compromised_vendor_pki.drawio.svg){#fig:compromised-vendor-pki}

Note that the act of issuing an identity certificate via an operator PKI necessarily involves relying on the trustworthiness of the vendor's PKI. This necessary trust in the vendor's PKI is point-in-time and does not extend past the time at which the certificate was issued. In the event that a vendor PKI becomes compromised, verifiers that trust the operator's PKI can continue to rely on attestations emitted from existing devices that have already been deployed to the operator's fleet. Furthermore, during identity certificate issuance, an operator may be able to rely on other signals in addition to the vendor's PKI to establish the authenticity of devices. See @sec:establishing-trust-in-identity for more details.

**Insulation from potential supply-chain compromise**

Devices often support a hierarchy of identity keys, derived from a number of inputs. @fig:identity-key-derivation illustrates how identity keys are derived in Caliptra [@{caliptra}]. Other devices may have different identity layering schemes.

![Identity key derivation](./diagrams/identity_key_derivation.drawio.svg){#fig:identity-key-derivation}

In Caliptra, the LDevID keypair is derived not only from UDS, but also field entropy, which is typically held in fuses and may be programmed into the device upon initial ingestion. By choosing the LDevID keypair as the PKI anchor point for the operator's device identity certificate, the operator insulates themselves from supply-chain attackers that may have invasively exfiltrated the device's UDS. See the Caliptra [specification](https://github.com/chipsalliance/Caliptra/blob/main/doc/caliptra_1x/Caliptra.md#ldevid-key) for additional commentary on the utility of LDevID and field entropy.

**Implicit attestation**

The PKI owner may select various keys in the identity hierarchy for which to issue a certificate. Each key will have different measurements contribute to that key's derivation. By issuing a device identity certificate for a given key, the PKI owner is implicitly blessing the measurements which contribute to that key's derivation. Any attestations endorsed via that identity certificate carry implicit assurance that the measurements which contribute to that identity key are the same as when the identity certificate was issued.

Consider the case of a data center operator that deploys a device, and a tenant that leases the device. This arrangement is illustrated in @fig:tenant-anchor-point.

![Tenant PKI anchor point](./diagrams/tenant_anchor_point.drawio.svg){#fig:tenant-anchor-point}

In this example, a device wielding an identity key endorsed by the tenant-issued identity certificate implicitly attests that its owner configuration and FMC hash are the same as was present on the device when the tenant issued the identity certificate. The certificate will be implicitly deactivated if the owner configuration or FMC hash change.

Note: "certificate deactivation" is not the same as certificate revocation or expiration. A certificate that was deactivated by virtue of an identity key derivation input changing will become re-activated if that input reverts to its prior value. PKI owners wishing to permanently revoke an identity certificate must therefore use a separate mechansim, such as a CRL.

Each PKI owner may have their own desired implicit attestation properties, and can select their PKI anchor point accordingly.

### Support for multiple PKI owners

A device may have multiple simultaneous PKI owners, and serve attestations to multiple verifiers, each with their own configured PKI root key.

While each identity certificate issued by a given PKI owner could be distributed to the relevant attestation verifiers through a number of means, the most tractable method in many cases is for the device to cache each of its PKI owner's identity certificates locally, and serve a selected identity certificate along with each attestation statement. Each attestation requester must be able to request a PKI anchor point on a per-attestation-request basis.

![Anchor point selection](./diagrams/anchor_point_selection.drawio.svg){#fig:anchor-point-selection}

Note: there may be intermediate certificates between a given PKI owner's root key and the identity certificate issued for a device. This specification does not impose an upper-limit on the number of intermediate certificates that may exist for a given PKI owner. Devices typically have limited internal storage capacity. As a result, this specification does not require that the device's attestation responses include any intermediate certificates beyond the identity certificate issued by a PKI owner. These intermediate certificates should be communicated to the verifier out-of-band. Such communication is outside the scope of this specification.

### Specification scope

This specification describes the following aspects of device identity endorsement and provisioning:

- Discovering the set of identity keypairs supported by a device, along with each keypair's respective derivation inputs.
- Establishing trust in a selected identity keypair from the device.
- Issuing and provisioning an identity certificate to the device.
- Requesting a given identity certificate when obtaining an attestation statement from the device.

The following items are out of scope:

- Certificate revocation
- General attestation verification

## Discovering device identity keypairs {#sec:discovering-device-keypairs}

TODO: fill in

## Establishing trust in a selected identity keypair {#sec:establishing-trust-in-identity}

To allow a remote party to establish trust in a selected keypair, the device can emit a CSR. This is supported in SPDM 1.3 [@{spdm-1.3}] via the GET_CSR command. However, there is a drawback to GET_CSR as it is currently defined: the CSR is signed only by the subject key, and does not include a way to attest that the CSR was emitted from a given device.

To allow a device to attest that a given key is trustworthy, the device should issue its own signature over the public key, which can include a freshness nonce and additional metadata, such as the key's derivation attribute OID.

![Envelope-signed CSR](./diagrams/envelope_signed_csr.drawio.svg){#fig:envelope-signed-csr}

The CSR is included as a component of a Conceptual Message Wrapper [@{ietf-cmw}].

Metadata such as the key's derivation attribute OID can also be embedded in a CoRIM. The mechanism for this is out of scope of this specification.

Some devices may not support the generation of self-signed CSRs for certain keys in their identity key hierarchy, such as LDevID. To support such devices, this specification defines a "non-self-signed CSR", which includes the subject public key but an all-zeroes signature field. The non-self-signed CSR is still itself signed, by way of the Conceptual Message Wrapper.

![Envelope-signed Non-self-signed CSR](./diagrams/envelope_signed_csr_non_self_signed.drawio.svg){#fig:envelope-signed-csr-non-self-signed}

This specification provides a definition for a vendor-defined SPDM command, utilizing VENDOR_DEFINED_REQUEST from SPDM 1.3, which can be used to surface these envelope-signed CSRs.

GET_ENVELOPE_SIGNED_CSR request and ENVELOPE_SIGNED_CSR response messages are transported as follows:

- The Requester must use the SPDM VENDOR_DEFINED_REQUEST format
- The Responder must use the SPDM VENDOR_DEFINED_RESPONSE format
- The StandardID field of VENDOR_DEFINED_REQUEST and VENDOR_DEFINED_RESPONSE message must contain 4 (the value assigned in SPDM to identify IANA).
- The VendorID field of VENDOR_DEFINED_REQUEST and VENDOR_DEFINED_RESPONSE message must contain 42623 (the value assigned in IANA to identify Open Compute Project).
- The first byte of the VendorDefinedReqPayload/VendorDefinedRespPayload is the Command Code, and must contain the value 01h to indicate GET_ENVELOPE_SIGNED_CSR / ENVELOPE_SIGNED_CSR.
- The GET_ENVELOPE_SIGNED_CSR request and ENVELOPE_SIGNED_CSR response forms the payload in the VendorDefinedReqPayload and VendorDefinedRespPayload respectively, defined in Tables [-@tbl:ecsr-req] and [-@tbl:ecsr-resp].

Table: GET_ENVELOPE_SIGNED_CSR VendorDefinedReqPayload {#tbl:ecsr-req}

+---------------------+---------------------+---------------------+----------------------------------------------+
| Byte offset         | Field               | Size (bytes)        | Description                                  |
+=====================+=====================+=====================+==============================================+
| 0                   | CommandCode         | 1                   | Shall be 01h to indicate                     |
|                     |                     |                     | GET_ENVELOPE_SIGNED_CSR.                     |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 1                   | CommandVersion      | 1                   | The version of this request structure.       |
|                     |                     |                     | Shall be zero.                               |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 2                   | Reserved            | 4                   | Reserved.                                    |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 6                   | Param1              | 1                   | KeyPairID. The value of this field           |
|                     |                     |                     | shall be the keypair ID identifying          |
|                     |                     |                     | the desired asymmetric key pair for          |
|                     |                     |                     | which the CSR should be issued.              |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 7                   | Param2              | 1                   | Request Attributes. Shall adhere to          |
|                     |                     |                     | Table 91 of SPDM 1.3.                        |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 8                   | RequesterInfoLength | 2                   | Shall be the length of the RequesterInfo     |
|                     |                     |                     | field in bytes provided by the Requester.    |
|                     |                     |                     | This field can be 0.                         |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 10                  | OpaqueDataLength    | 2                   | Shall be the length of the OpaqueData        |
|                     |                     |                     | field in bytes provided by the Requester.    |
|                     |                     |                     | The value should not be greater than 1024    |
|                     |                     |                     | bytes. Shall be 0 if no OpaqueData is        |
|                     |                     |                     | provided.                                    |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 12                  | SignerSlotIDParam   | 1                   | - Bit [7:5]. Reserved.                       |
|                     |                     |                     | - Bit [4:4]. If this value is `1`, the CSR   |
|                     |                     |                     | envelope is signed; otherwise the envelope   |
|                     |                     |                     | is unsigned, and bits [3:0] are ignored.     |
|                     |                     |                     | - Bit [3:0]. Shall be the SlotID. Slot       |
|                     |                     |                     | number of the Responder certificate chain    |
|                     |                     |                     | that shall be used for authenticating the    |
|                     |                     |                     | CSR envelope. If the Responder’s public key  |
|                     |                     |                     | was provisioned to the Requester previously, |
|                     |                     |                     | this field shall be 0xF.                     |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 13                  | Nonce               | 32                  | The Requester should choose a random         |
|                     |                     |                     | value.                                       |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 45                  | RequesterInfo       | RequesterInfoLength | Shall be the optional information provided   |
|                     |                     |                     | by the Requester. This field shall be        |
|                     |                     |                     | DER-encoded.                                 |
+---------------------+---------------------+---------------------+----------------------------------------------+
| 45 +                | OpaqueData          | OpaqueDataLength    | The Requester can include vendor-specific    |
| RequesterInfoLength |                     |                     | information for the Responder to generate    |
|                     |                     |                     | the CSR. This field is optional. If present, |
|                     |                     |                     | this field shall conform to the selected     |
|                     |                     |                     | opaque data format in OtherParamsSelection   |
|                     |                     |                     | from Table 21 of SPDM 1.3.                   |
+---------------------+---------------------+---------------------+----------------------------------------------+

The following fields should be treated identically as in GET_CSR from SPDM 1.3:

- Param1
- Param2
- RequesterInfoLength
- OpaqueDataLength
- RequesterInfo
- OpaqueData

The following fields present in this command are not present in GET_CSR:

- **SignerSlotIDParam** - defines which key signs the CSR envelope.
- **Nonce** - provides freshness.

Table: ENVELOPE_SIGNED_CSR VendorDefinedRespPayload {#tbl:ecsr-resp}

+--------+-------------------------+-------------------------+------------------------------------------+
| Byte   | Field                   | Size (bytes)            | Description                              |
| offset |                         |                         |                                          |
+========+=========================+=========================+==========================================+
| 0      | CommandCode             | 1                       | Shall be 01h to indicate                 |
|        |                         |                         | ENVELOPE_SIGNED_CSR.                     |
+--------+-------------------------+-------------------------+------------------------------------------+
| 1      | CommandVersion          | 1                       | The version of this request structure.   |
|        |                         |                         | Shall be zero.                           |
+--------+-------------------------+-------------------------+------------------------------------------+
| 2      | Reserved                | 4                       | Reserved.                                |
+--------+-------------------------+-------------------------+------------------------------------------+
| 6      | EnvelopeSignedCSRLength | 2                       | Shall be the length of the               |
|        |                         |                         | EnvelopeSignedCSRdata in bytes.          |
+--------+-------------------------+-------------------------+------------------------------------------+
| 8      | EnvelopeSignedCSRdata   | EnvelopeSignedCSRLength | Shall be the requested contents of the   |
|        |                         |                         | envelope-signed CSR. This field shall be |
|        |                         |                         | CBOR-encoded.                            |
+--------+-------------------------+-------------------------+------------------------------------------+

The EnvelopeSignedCSRdata shall adhere to the following requirements:

- TODO: fill in

## Issuing and provisioning an identity certificate {#sec:issuing-and-provisioning-identity-cert}

TODO: fill in

## Requesting an identity certificate during attestation {#sec:requesting-identity-cert-during-attestation}

TODO: fill in

## Confidential compute considerations

TODO: fill in

# Appendix

## Clarification of DICE Terminology {#sec:dice-terminology-clarification}

In this specification, several example device identity key hierarchies use the term "FMC". In this context, FMC stands for "First Mutable Code".

In TCG's DICE Hardware Requirements [@{tcg-dice-hardware-requirements}], FMC is defined as "First Measured Code", and is "the code and/or configuration information that is executed and/or takes effect immediately following the Device Identifier Composition Engine". First Measured Code is synonymous with Layer 0 in the DICE Layering Architecture [@{tcg-dice-layering-architecture}].

The difference between First Measured Code and First Mutable Code is subtle but important. In Caliptra, the First Measured Code corresponds with the Caliptra ROM layer. As such, Caliptra's Device ID or IDevID keypair is wielded by ROM, rather than Caliptra's FMC.
